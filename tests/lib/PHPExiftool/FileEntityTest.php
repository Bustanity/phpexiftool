<?php

namespace PHPExiftool;

require_once dirname(__FILE__) . '/../../../lib/PHPExiftool/FileEntity.php';

/**
 * Test class for FileEntity.
 * Generated by PHPUnit on 2012-04-20 at 13:51:22.
 */
class FileEntityTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var FileEntity
     */
    protected $object;

    /**
     * @covers PHPExiftool\FileEntity::__construct
     */
    protected function setUp()
    {
        $dom = new \DOMDocument();
        $dom->loadXML(file_get_contents(__DIR__ . '/../../files/ExifTool.xml'));

        $this->object = new FileEntity(new \SplFileInfo('testFile'), $dom, new \PHPExiftool\RDFParser());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers PHPExiftool\FileEntity::getIterator
     */
    public function testGetIterator()
    {
        $this->assertInstanceOf('\\Iterator', $this->object->getIterator());
    }

    /**
     * @covers PHPExiftool\FileEntity::getFile
     */
    public function testGetFile()
    {
        $this->assertInstanceOf('\\SplFileInfo', $this->object->getFile());
    }

    /**
     * @covers PHPExiftool\FileEntity::getMetadatas
     */
    public function testGetMetadatas()
    {
        $this->assertInstanceOf('\\PHPExiftool\Driver\Metadata\MetadataBag', $this->object->getMetadatas());
        $this->assertEquals(348, count($this->object->getMetadatas()));

//        foreach($this->object->getMetadatas() as $meta)
//        {
//            if($meta->getValue() instanceof \PHPExiftool\Driver\Value\Binary)
//                var_dump($meta);
//        }
    }

    /**
     * @covers PHPExiftool\FileEntity::executeQuery
     */
    public function testExecuteQuery()
    {
        $this->assertInstanceOf('\\PHPExiftool\\Driver\\Value\\Mono', $this->object->executeQuery('IFD0:Copyright'));
        $this->assertEquals('Copyright 2004 Phil Harvey', $this->object->executeQuery('IFD0:Copyright')->getValue());

        $this->assertInstanceOf('\\PHPExiftool\\Driver\\Value\\Binary', $this->object->executeQuery('CIFF:FreeBytes'));

        $this->assertInstanceOf('\\PHPExiftool\\Driver\\Value\\Multi', $this->object->executeQuery('XMP-dc:Subject'));
        $this->assertEquals(array('ExifTool', 'Test', 'XMP'), $this->object->executeQuery('XMP-dc:Subject')->getValue());
    }

}
